#include "Common.cginc"
#include "Surfel.cginc"

// texture to store raytracing result
RWTexture2D<float4> _DxrTarget;
TextureCube _SkyBox;

float3 _CameraPosition;
float4 _CameraRotation;
float3 _CameraOffset;

int _FrameIndex;

#pragma max_recursion_depth 8

[shader("raygeneration")]
void RaygenShader() {
	// start one ray per pixel

	// current pixel
	uint2 dispatchIdx = DispatchRaysIndex().xy;
	// target resolution
	uint2 launchDim = DispatchRaysDimensions().xy;
	
	// init random seed from current pixel location and frame index
	uint seed = initRand(dispatchIdx.x + dispatchIdx.y * launchDim.x, _FrameIndex);

	// get random uv inside current pixel
	// this gives us anti-aliasing for free
	// + float2(nextRand(seed), nextRand(seed))
	float3 rayDir = normalize(quatRot(float3((float2)dispatchIdx - _CameraOffset.xy, _CameraOffset.z), _CameraRotation));

	// init ray decriptor
	RayDesc rayDesc;
	rayDesc.Origin = _CameraPosition;
	rayDesc.Direction = rayDir;
	rayDesc.TMin = 0;
	rayDesc.TMax = 100;

	// Create and init the ray payload
	RayPayload rayPayload;
	rayPayload.color = float3(0.0, 0.0, 0.0);
	rayPayload.randomSeed = seed;
	rayPayload.depth = 0;

	// shoot primary ray
	// flags: https://microsoft.github.io/DirectX-Specs/d3d/Raytracing.html
	// maybe for later, for shadows: RAY_FLAG_ACCEPT_FIRST_HIT_AND_END_SEARCH
	TraceRay(_RaytracingAccelerationStructure, RAY_FLAG_CULL_BACK_FACING_TRIANGLES,
		RAYTRACING_OPAQUE_FLAG, 0, 1, 0, rayDesc, rayPayload);

	// store result
	_DxrTarget[dispatchIdx] = float4(rayPayload.color, 1);	
}

// "back up" closest hit shader. it is used when we hit material without raytracing shader pass
[shader("closesthit")]
void ClosestHitMain(inout RayPayload rayPayload : SV_RayPayload, AttributeData attributeData : SV_IntersectionAttributes) {
	// simply return pink color to signal error
	// to do this is never called... why?
	rayPayload.color = float3(1.0, 0.0, 0.5);
}

SamplerState _LinearClamp;
// miss shader, used when we don't hit any geometry
[shader("miss")]
void MissShader(inout RayPayload rayPayload : SV_RayPayload) {
	// todo this looks like SDR... how do we get HDR colors?
	float3 color = _SkyBox.SampleLevel(_LinearClamp, WorldRayDirection(), 0).rgb;
	rayPayload.color = rayPayload.depth == 0 ? float3(1,1,1) : color;
}
