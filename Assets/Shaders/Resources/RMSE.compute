
#pragma kernel RMSEKernel

// textures to compare, e.g., Src1 = result, Src2 = baseline
Texture2D<float4> Src1;
Texture2D<float4> Src2;

// 32th of the size
RWStructuredBuffer<float> Dst;
 
groupshared float tmp[1024];

[numthreads(32,32,1)]
void RMSEKernel (uint3 id : SV_DispatchThreadID) {
    uint2 uv = id.xy;
    uint2 size;
    Src1.GetDimensions(size.x, size.y);
    uint2 localId2 = uv & 31;
    uint localId = localId2.x + (localId2.y << 5);
    // calculate error
    // barriers in HLSL seem to need to include all workers, not just non-finished ones...
    float3 error = all(uv < size) ? Src1[uv].xyz-Src2[uv].xyz : float3(0,0,0);
    float sqError = dot(error, error);
    // save to shared memory
    tmp[localId] = sqError;
    int step = 1;
    int mask = 1;
    // reduce error in shared memory in log2(N) time
    while(step < 1024){
        GroupMemoryBarrierWithGroupSync();
        // memoryBarrierShared();
        if((localId & mask) == 0) tmp[localId] += tmp[localId + step];
        step = step << 1;  // 1, 2, 4,  8, 16, ... = 2^i
        mask = mask | step;// 1, 3, 7, 15, 31, ... = 2*step-1
    }
    if(localId == 0) {
        uv = uv >> 5;
        int index = uv.x + uv.y * ((size.x + 31) >> 5);
        Dst[index] = tmp[0];
    }
}
