#include "Common.cginc"

struct Surfel {
    float4 position;
    float4 rotation;
    float4 color;
	float4 data;
};

float3 _CameraPosition;
float4 _CameraRotation;
float3 _CameraOffset;
float2 _CameraUVSize;
float _Far;
bool _AllowStrayRays;
bool _AllowSkySurfels;

int _FrameIndex;

#pragma max_recursion_depth 8

RWStructuredBuffer<Surfel> _Surfels;

float3 quatRot(float3 v, float4 q){
	return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}

float3 quatRotInv(float3 v, float4 q){
	return v - 2.0 * cross(q.xyz, cross(v, q.xyz) + q.w * v);
}

[shader("raygeneration")]
void RaygenShader() {
	// start one ray per surfel

	// current surfel
	uint index = DispatchRaysIndex().x;
	uint numSurfels, stride;
	_Surfels.GetDimensions(numSurfels, stride);
	if(index < numSurfels) {

		// we know the surface, but we do not know the local BDRF ->
		// we need to trace the first ray, even if we know where it ends

		Surfel surfel = _Surfels[index];
		float surfelSize = surfel.position.w;
		if(_AllowSkySurfels || surfelSize < _Far * 0.5) {// the sky has GI = 1, so no updates required

			float3 surfelPos = surfel.position.xyz;
			float3 deltaPos = surfelPos - _CameraPosition;
			float  distance = length(deltaPos);
			float3 worldDir = deltaPos / distance;
			float3 worldNormal = quatRot(float3(0,1,0), surfel.rotation);
			float3 cameraDir = quatRotInv(worldDir, _CameraRotation);

			// only update surfels, which are in front of the camera
			float2 uvTolerance = 1.05; // close to edge should be traced as well
			if(cameraDir.z > 0.0 && all(abs(cameraDir.xy) < _CameraUVSize * uvTolerance) && 
				// test whether the surfel can be visible from the camera; the sky has no GBuffer information in Unity -> skip this test
				(_AllowSkySurfels || dot(worldDir, worldNormal) < 0.0) &&
				distance > 0.001) {

				// problem stays the same
				// distance = 1;
				// worldDir = -worldNormal;
				
				// init random seed from current pixel location and frame index
				uint seed = initRand(index, _FrameIndex);

				// get random uv inside current pixel
				// this gives us anti-aliasing for free
				// + float2(nextRand(seed), nextRand(seed))
				// todo we could spawn random rays to any point of the surfel disk

				float startDist = clamp(0.1 * surfelSize, 0.01, 100.0);

				// init ray decriptor
				RayDesc rayDesc;
				// rayDesc.Origin = _CameraPosition;
				rayDesc.Origin = surfelPos - startDist * worldDir; // start close to the surface
				rayDesc.Direction = worldDir;
				rayDesc.TMin = startDist * 0.5;
				rayDesc.TMax = startDist * 2.0;

				int remainingTries = max(1, 8 - (int) surfel.color.w);

				// Create and init the ray payload
				RayPayload rayPayload;
				rayPayload.randomSeed = seed;

				bool hasChanged = false;
				for(int i=0;i<remainingTries;i++){

					rayPayload.color = float3(0.0, 0.0, 0.0);
					rayPayload.depth = 0;
					rayPayload.distance = 0.0;

					// shoot primary ray
					// flags: https://microsoft.github.io/DirectX-Specs/d3d/Raytracing.html
					// maybe for later, for shadows: RAY_FLAG_ACCEPT_FIRST_HIT_AND_END_SEARCH
					TraceRay(_RaytracingAccelerationStructure, RAY_FLAG_CULL_BACK_FACING_TRIANGLES,
						RAYTRACING_OPAQUE_FLAG, 0, 1, 0, rayDesc, rayPayload);

					// todo this only works, if the camera is not moving... why?
					// if we land outside the expected region, reject the sample
					if(_AllowStrayRays || (rayPayload.distance >= rayDesc.TMin && rayPayload.distance <= rayDesc.TMax)){
						// rayPayload.color = frac(rayPayload.distance + 0.5);
						surfel.color += float4(rayPayload.color, 1.0);
						// float maxWeight = 256.0;
						// if(surfel.color.w > maxWeight) surfel.color *= maxWeight / surfel.color.w;
						hasChanged = true;
					}
				}
				if(hasChanged) {
					_Surfels[index] = surfel;
				}
			}
		}
	}
}

// "back up" closest hit shader. it is used when we hit material without raytracing shader pass
[shader("closesthit")]
void ClosestHitMain(inout RayPayload rayPayload : SV_RayPayload, AttributeData attributeData : SV_IntersectionAttributes) {}

// miss shader, used when we don't hit any geometry
TextureCube _SkyBox;
SamplerState _LinearClamp;
[shader("miss")]
void MissShader(inout RayPayload rayPayload : SV_RayPayload) {
	// todo this looks like SDR... how do we get HDR colors?
	float3 color = _SkyBox.SampleLevel(_LinearClamp, WorldRayDirection(), 0).rgb;
	rayPayload.distance = _Far;
	rayPayload.color = rayPayload.depth == 0 ? float3(1,1,1) : color;
}
