#include "Common.cginc"

// texture to store raytracing result
RWTexture2D<float4> _DxrTarget;

float3 _TopLeftFrustumDir;
float3 _TopRightFrustumDir;
float3 _BottomLeftFrustumDir;
float3 _BottomRightFrustumDir;

float4 _SkyColor;
float4 _GroundColor;

float3 _CameraPos;

int _RaysPerPixel;
int _FrameIndex;

#pragma max_recursion_depth 8

[shader("raygeneration")]
void RaygenShader() {
	// start one ray per pixel

	// current pixel
	uint2 dispatchIdx = DispatchRaysIndex().xy;
	// target resolution
	uint2 launchDim = DispatchRaysDimensions().xy;
	
	// init random seed from current pixel location and frame index
	uint seed = initRand(dispatchIdx.x + dispatchIdx.y * launchDim.x, _FrameIndex);

	// get random uv inside current pixel
	// this will give us anti-aliasing for free
	float2 uv = ((float2)dispatchIdx + float2(nextRand(seed), nextRand(seed))) / (float2)launchDim;
	
	// translate screen uv to ray direction
	float3 topHorizontalRayDir = lerp(_TopLeftFrustumDir, _TopRightFrustumDir, uv.x);
	float3 bottomHorizontalRayDir = lerp(_BottomLeftFrustumDir, _BottomRightFrustumDir, uv.x);
	float3 rayDir = normalize(lerp(bottomHorizontalRayDir, topHorizontalRayDir, uv.y));

	// init ray decriptor
	RayDesc rayDesc;
	rayDesc.Origin = _CameraPos; // start at camera position
	rayDesc.Direction = rayDir;
	rayDesc.TMin = 0;
	rayDesc.TMax = 100;

	// Create and init the ray payload
	RayPayload rayPayload;
	rayPayload.color = float3(0.0, 0.0, 0.0);
	rayPayload.randomSeed = seed;
	rayPayload.depth = 0;

	// shoot primary ray
	TraceRay(_RaytracingAccelerationStructure, RAY_FLAG_NONE, RAYTRACING_OPAQUE_FLAG, 0, 1, 0, rayDesc, rayPayload);

	// store result
	_DxrTarget[dispatchIdx] = float4(rayPayload.color, 1);	
}

[shader("raygeneration")]
void ColorShader() {
	// start one ray per pixel

	// current pixel
	uint2 dispatchIdx = DispatchRaysIndex().xy;
	// target resolution
	uint2 launchDim = DispatchRaysDimensions().xy;
	
	// init random seed from current pixel location and frame index
	uint seed = initRand(dispatchIdx.x + dispatchIdx.y * launchDim.x, _FrameIndex);

	// get random uv inside current pixel
	// this will give us anti-aliasing for free
	float2 uv = ((float2)dispatchIdx + 0.5) / (float2)launchDim;
	
	// translate screen uv to ray direction
	float3 topHorizontalRayDir = lerp(_TopLeftFrustumDir, _TopRightFrustumDir, uv.x);
	float3 bottomHorizontalRayDir = lerp(_BottomLeftFrustumDir, _BottomRightFrustumDir, uv.x);
	float3 rayDir = normalize(lerp(bottomHorizontalRayDir, topHorizontalRayDir, uv.y));

	// init ray decriptor
	RayDesc rayDesc;
	rayDesc.Origin = _CameraPos; // start at camera position
	rayDesc.Direction = rayDir;
	rayDesc.TMin = 0;
	rayDesc.TMax = 100;

	// Create and init the ray payload
	RayPayload rayPayload;
	rayPayload.color = float3(0.0, 0.0, 0.0);
	rayPayload.randomSeed = seed;
	rayPayload.depth = 0;

	// shoot primary ray
	TraceRay(_RaytracingAccelerationStructure, RAY_FLAG_NONE, RAYTRACING_OPAQUE_FLAG, 0, 1, 0, rayDesc, rayPayload);

	// store result 
	_DxrTarget[dispatchIdx] = float4(rayPayload.color, 1);	
}

// "back up" closest hit shader. it is used when we hit material without raytracing shader pass
[shader("closesthit")]
void ClosestHitMain(inout RayPayload rayPayload : SV_RayPayload, AttributeData attributeData : SV_IntersectionAttributes) {
	// simply return pink color to signal error
	// todo this is never called... why?
	rayPayload.color = float3(1.0, 0.0, 0.5);
}

// miss shader, used when we don't hit any geometry
[shader("miss")]
void MissShader(inout RayPayload rayPayload : SV_RayPayload) {
	// return gradient background color
	float3 rayDir = WorldRayDirection();
	float3 sunDir = normalize(float3(0.8, 2.5, 0.3));
	float sunLight = 50000.0 * pow(max(dot(rayDir, sunDir), 0.0), 1000.0);
	rayPayload.color = lerp(_GroundColor, _SkyColor, rayDir.y * 0.5 + 0.5) + sunLight;	
}
